// Tâmia © 2013 Artem Sapegin http://sapegin.me
// Grids and layouts

// Grid gutter size, in pixels (default: 2×spacer).
grid-gutter ?= 2*spacer

// Number of columns in grid (default: 12).
grid-columns ?= 12

// Generate layout classes (default: true).
layout-classes ?= true


//
// Grid
// Inspired by http://zengrids.com
//

// Columns wrapper.
grid-row()
	clearfix()
	grid-wrapper()

// Column (grid).
//
// position - Start column number (default: 1).
// span - Width, in culumns (default: 1).
// context - Width of parent column (default: null).
//
// Example:
//   .row>.col1+.col2
//
//   .row
//     grid-row()
//   .col1
//     grid-col(1,2)
//   .col2
//     grid-col(3,10)
grid-col(position=1, span=1, context=null)
	_grid-column(position, span, context)
	_grid-float()
	grid-padding()

// Single column.
//
// position - Start column number (default: 1).
// span - Width, in culumns (default: 1).
// context - Width of parent column (default: null).
grid-one(position=1, span=1, context=null)
	_grid-column(position, span, context)
	grid-padding()

// Single column (without padding, wrapper for child columns).
//
// position - Start column number (default: 1).
// span - Width, in culumns (default: 1).
// context - Width of parent column (default: null).
grid-one-container(position=1, span=1, context=null)
	clearfix()
	_grid-column(position, span, context)

// Gutter size negative margin + padding to make column with different background.
grid-explode()
	margin: (-(grid-gutter))
	padding: grid-gutter (grid-gutter / 2)

// Width of column, in percent.
//
// position - Start column number (default: 1).
// span - Width, in culumns (default: 1).
//
// Returns percent.
grid-width(span=1, context=null)
	context = grid-columns if not context
	unit-width = 100% / context
	span * unit-width

// Column left/right padding.
grid-padding()
	side-gutter = grid-gutter / 2;
	padding-left: side-gutter
	padding-right: side-gutter

// Column wrapper left/right negative margin.
grid-wrapper()
	side-gutter = (-(grid-gutter / 2))
	margin-left: side-gutter
	margin-right: side-gutter

_grid-column(position=1, span=1, context=null)
	context = grid-columns if not context
	unit-width = 100% / context
	width: span * unit-width
	margin-left: (position - 1) * unit-width

_grid-float()
	float: left
	margin-right: -100%


//
// Layouts
//

// Layout wrapper.
layout-row()
	grid-wrapper()
	// Temporary flexbox implementaion that works in IE 10
	// Nib implementation is broken
	display: -ms-flexbox
	-ms-box-orient: horizontal
	display: -webkit-flex
	display: -moz-flex
	display: -ms-flex
	display: flex
	-webkit-flex-flow: row wrap
	-moz-flex-flow: row wrap
	-ms-flex-flow: row wrap
	flex-flow: row wrap
	// IE8-9
	.no-flexbox &
		letter-spacing: -0.31em

// Column (simple layout).
//
// part - 1/Nth part of wrapper.
//
// Example
//   .row>.col+.col
//
//   .row
//     layout-row()
//   .col
//     layout-nth(2)  // Half
layout-nth(part)
	_layout-col()
	_layout-part(part)

// Change number of columns.
//
// Use it to change number of columns (defined via layout-nth()) inside media queries.
//
// part - 1/Nth part of wrapper.
layout-change(part)
	_layout-part(part)

// Disable columns.
//
// Alias for layout-change(1).
layout-stop()
	_layout-part(1)

_layout-col()
	grid-padding()
	// IE8-9
	.no-flexbox &
		display: inline-block
		vertical-align: top
		letter-spacing: normal

_layout-part(part)
	width: (100% / part)


//
// Classes
//

if layout-classes

	// Column wrapper.
	.l-row
		layout-row()

	.l-sixth,
	.l-quarter,
	.l-third,
	.l-half,
	.l-three-quarters,
	.l-two-thirds
		_layout-col()

	// Sixth (to use inside .l-row).
	.l-sixth
		_layout-part(6)

	// Quarter (to use inside .l-row).
	.l-quarter
		_layout-part(4)

	// Three quarters (to use inside .l-row).
	.l-three-quarters
		_layout-part(4/3)

	// Third (to use inside .l-row).
	.l-third
		_layout-part(3)

	// Two thirds (to use inside .l-row).
	.l-two-thirds
		_layout-part(3/2)

	// Half (to use inside .l-row).
	.l-half
		_layout-part(2)

	// Last column (to use inside .l-row).
	.l-last
		float: right


//
// Spacing
//

// Space after block.
//
// rows - Number of “rows” (one row = default spacer).
space(rows=1)
	margin-bottom: rows*spacer

if layout-classes

	// Standard bottom margin.
	.l-space
		space()

	// Double bottom margin.
	.l-double-space
		space(2)

	// Triple bottom margin.
	.l-triple-space
		space(3)


//
// Debug stuff
//

if DEBUG and layout-classes
	.g-debug-col
		_layout-col()
		width: grid-width()

	.g-debug-helper
		position: absolute
		left: 0
		right: 0
		height: 100%
		min-height: 3000px
		z-index: 10000
		pointer-events: none
		*
			height: 100%
		.g-debug-col:before
			content: ""
			display: block
			height: 100%
			background: hsla(220,40%,50%,.25)
